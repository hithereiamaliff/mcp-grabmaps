startCommand:
  type: stdio
  configSchema:
    type: object
    required:
      - grabMapsApiKey
      - awsAccessKeyId
      - awsSecretAccessKey
    properties:
      grabMapsApiKey:
        type: string
        title: GrabMaps API Key
        description: Your GrabMaps API key for accessing the GrabMaps services
      awsAccessKeyId:
        type: string
        title: AWS Access Key ID
        description: AWS Access Key ID for accessing AWS Location Services
      awsSecretAccessKey:
        type: string
        title: AWS Secret Access Key
        description: AWS Secret Access Key for accessing AWS Location Services
      awsRegion:
        type: string
        title: AWS Region
        description: AWS Region (default is ap-southeast-5)
        default: ap-southeast-5
  commandFunction: |-
    (config) => ({
      "command": "node",
      "args": [
        "dist/smithery.js"
      ],
      "env": {
        "GRABMAPS_API_KEY": config.grabMapsApiKey,
        "AWS_ACCESS_KEY_ID": config.awsAccessKeyId,
        "AWS_SECRET_ACCESS_KEY": config.awsSecretAccessKey,
        "AWS_REGION": config.awsRegion || "ap-southeast-5"
      }
    })
build:
  dockerfile: Dockerfile
tools:
  - name: searchPlaceIndexForText
    description: Search for places using text query in Southeast Asia
    inputSchema:
      type: object
      required:
        - query
        - country
      properties:
        query:
          type: string
          description: Search query text
        country:
          type: string
          description: Three-letter ISO country code (e.g., "SGP" for Singapore, "MYS" for Malaysia)
        maxResults:
          type: number
          description: Maximum results to return
        language:
          type: string
          description: Language code
  - name: searchPlaceIndexForPosition
    description: Search for places by coordinates (reverse geocoding)
    inputSchema:
      type: object
      required:
        - longitude
        - latitude
      properties:
        longitude:
          type: number
          description: Longitude coordinate
        latitude:
          type: number
          description: Latitude coordinate
        maxResults:
          type: number
          description: Maximum results to return
        language:
          type: string
          description: Language code
  - name: searchPlaceIndexForSuggestions
    description: Get place suggestions based on partial text input
    inputSchema:
      type: object
      required:
        - query
        - country
      properties:
        query:
          type: string
          description: Search query text
        country:
          type: string
          description: Three-letter ISO country code (e.g., "SGP" for Singapore, "MYS" for Malaysia)
        maxResults:
          type: number
          description: Maximum results to return
        language:
          type: string
          description: Language code
  - name: getPlace
    description: Get place details by place ID
    inputSchema:
      type: object
      required:
        - placeId
      properties:
        placeId:
          type: string
          description: ID of the place to retrieve
        language:
          type: string
          description: Language code
  - name: calculateRoute
    description: Calculate a route between two points
    inputSchema:
      type: object
      required:
        - origin
        - destination
      properties:
        origin:
          type: object
          properties:
            longitude:
              type: number
            latitude:
              type: number
        destination:
          type: object
          properties:
            longitude:
              type: number
            latitude:
              type: number
        travelMode:
          type: string
          enum: [Car, Truck, Walking, Bicycle, Motorcycle]
        distanceUnit:
          type: string
          enum: [Kilometers, Miles]
  - name: calculateRouteMatrix
    description: Calculates a route matrix between multiple origins and destinations
    inputSchema:
      type: object
      required:
        - departurePositions
        - destinationPositions
      properties:
        departurePositions:
          type: array
          items:
            type: array
            items:
              type: number
        destinationPositions:
          type: array
          items:
            type: array
            items:
              type: number
        travelMode:
          type: string
          enum: [Car, Truck, Walking, Bicycle, Motorcycle]
        distanceUnit:
          type: string
          enum: [Kilometers, Miles]
        departureTime:
          type: string
